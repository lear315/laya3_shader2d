{
  "version": 3,
  "sources": ["../../src/AniDepthValue2d.ts", "../../src/CustomValue2d.ts", "../../src/Depth2dFS.ts", "../../src/Depth2dVS.ts", "../../src/Main.ts"],
  "sourcesContent": ["export default class AniDepthValue2d {\r\n    private _texture_depth: WebGLTexture = null;\r\n    private _texture_host_depth: Laya.Texture = null;\r\n    private _dimensions: number[] = [0, 0, 0, 0];\r\n    private _mapDimensions: number[] = [1, 5112];\r\n    private _scale: number = .0215;\r\n    private _offset: number[] = [ 0.1, 0.1, 0.1];\r\n    private _focus: number = .5;\r\n    private _enlarge: number = 1.06;\r\n    public animateType: number = 1;\r\n    public animateDuration: number = 3;\r\n    public easeFactor: number = .2;\r\n    public animateScale = {\r\n        x: 1,\r\n        y: .95,\r\n        z: 0.95,\r\n        px: 0.9,\r\n        py: .925,\r\n        pz: .925\r\n    }\r\n    public pointZ = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n    public pointB = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    public constructor(texture_id: number) {\r\n        // \u7ED1\u5B9A\u6570\u636E\r\n        (Laya.Shader2X as any)['value2dMap'][texture_id] = this;\r\n        Laya.timer.frameLoop(1, this, this.update);\r\n    }\r\n\r\n    private update() {\r\n        if (this.animateType == 0) {\r\n            return;\r\n        }\r\n        if (this.animateType == 1) {\r\n            // \u6295\u5F71\r\n            let time = Date.now() / 1e3 / this.animateDuration;\r\n            let s = this.animateScale.px;\r\n            let l = this.animateScale.py;\r\n            let u = this.animateScale.pz;\r\n            this.offset = [\r\n                Math.sin(2 * Math.PI * (time + s)) * this.animateScale.x,\r\n                Math.sin(2 * Math.PI * (time + l)) * this.animateScale.y,\r\n                .5 * (1 + Math.sin(2 * Math.PI * (time + u))) * this.animateScale.z\r\n            ];\r\n        }\r\n    }\r\n\r\n    public get texture_depth(): WebGLTexture {\r\n        return this._texture_depth;\r\n    }\r\n\r\n    public set texture_host_depth(texture: Laya.Texture) {\r\n        this._texture_depth = (texture as any)[\"_getSource\"]();\r\n        this._texture_host_depth = texture;\r\n    }\r\n\r\n    public get dimensions(): number[] {\r\n        return this._dimensions;\r\n    }\r\n\r\n    public set dimensions(value: number[]) {\r\n        this._dimensions = value;\r\n    }\r\n\r\n    public get mapDimensions(): number[] {\r\n        return this._mapDimensions;\r\n    }\r\n\r\n    public set mapDimensions(value: number[]) {\r\n        this._mapDimensions = value;\r\n    }\r\n\r\n    public get scale(): number {\r\n        return this._scale;\r\n    }\r\n\r\n    public set scale(value: number) {\r\n        this._scale = value;\r\n    }\r\n\r\n    public get offset(): number[] {\r\n        return this._offset;    \r\n    }\r\n\r\n    public set offset(value: number[]) {\r\n        this._offset = value;\r\n    }\r\n\r\n    public get focus(): number {\r\n        return this._focus;\r\n    }\r\n\r\n    public set focus(value: number) {\r\n        this._focus = value;\r\n    }\r\n\r\n    public get enlarge(): number {\r\n        return this._enlarge;\r\n    }\r\n\r\n    public destroy() {\r\n        Laya.timer.clear(this, this.update);\r\n        this._texture_depth = null;\r\n        if (this._texture_host_depth) {\r\n            this._texture_host_depth.disposeBitmap();\r\n        }\r\n        this._texture_host_depth = null;\r\n    }\r\n\r\n}", "/**\r\n * \u81EA\u5B9A\u4E492D\u7684shader\u7684Value2d\u6269\u5C55\r\n */\r\n\r\nexport default class CustomValue2d extends Laya.TextureSV{\r\n    public u_colorMatrix: any[];\r\n    public strength: number = 0;\r\n    public blurInfo: any[] = null;\r\n    public colorMat: Float32Array = null;\r\n    public colorAlpha: Float32Array = null;\r\n    private value2dProxy: any = null;\r\n    private _textureHost: Laya.Texture = null;\r\n    // \u81EA\u5B9A\u4E49\u7684ShaderDefines2D\r\n    public static CustomId = 0x4000\r\n\r\n    public static applyCustomId(): number{\r\n        let currentId = this.CustomId;\r\n        (Laya.Shader2X as any)['customDefines2D'].push(currentId);\r\n        this.CustomId++;\r\n        return currentId;\r\n    }\r\n\r\n    constructor(subID:number=0){\r\n        super(subID);     \r\n        this._attribLocation = ['posuv', 0, 'attribColor', 1, 'attribFlags', 2];\r\n        // \u91CD\u5199,\u589E\u52A0\u4EE3\u7406\u7ED1\u5B9A\r\n        Object.defineProperty(this, 'textureHost', {\r\n            get() {\r\n                return this._textureHost;\r\n            },\r\n            set(newValue: number) {\r\n                this._textureHost = newValue;\r\n                this.value2dProxy = (Laya.Shader2X as any)['value2dMap'][this._textureHost.id];\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n          });\r\n    }\r\n\r\n    public clear():void{\r\n        super.clear();\r\n    }\r\n\r\n    public setValue(value: Laya.Shader2D):void{\r\n        super.setValue(value);\r\n    }\r\n\r\n    public upload():void{\r\n        //\u6E32\u67D3\u4E4B\u524D\u53EF\u7528\u66F4\u65B0\u81EA\u5B9A\u4E49\u7684\u53D8\u91CF\r\n        super.upload();\r\n    }\r\n\r\n    /**\r\n     * \u4EE3\u7406\u53C2\u6570\u4F20\u9012\r\n     */\r\n    public get texture_depth(): WebGLTexture {\r\n        return this.value2dProxy.texture_depth;\r\n    }\r\n\r\n    public get dimensions(): number[] {\r\n        return this.value2dProxy.dimensions;\r\n    }\r\n\r\n    public get mapDimensions(): number[] {\r\n        return this.value2dProxy.mapDimensions;\r\n    }\r\n\r\n    public get scale(): number {\r\n        return this.value2dProxy.scale;\r\n    }\r\n\r\n    public get offset(): number[] {\r\n        return this.value2dProxy.offset;\r\n    }\r\n\r\n    public get focus(): number {\r\n        return this.value2dProxy.focus;\r\n    }\r\n\r\n    public get enlarge(): number {\r\n        return this.value2dProxy.enlarge;\r\n    }\r\n}", "export let Depth2dFS = `\n/*\n\ttexture\u548Cfillrect\u4F7F\u7528\u7684\u3002\n*/\n#if defined(GL_FRAGMENT_PRECISION_HIGH) \nprecision highp float;\n#else\nprecision mediump float;\n#endif\nvec3 linearToGamma(in vec3 value)\n{\n    return vec3(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))));\n    \n    \n}\nvec4 linearToGamma(in vec4 value)\n{\n    return vec4(linearToGamma(value.rgb), value.a);\n}\nvec3 gammaToLinear(in vec3 value)\n{\n    \n    return pow(value, vec3(2.2));\n}\nvec4 gammaToLinear(in vec4 value)\n{\n    return vec4(gammaToLinear(value.rgb), value.a);\n}\nvarying vec4 v_texcoordAlpha;\nvarying vec4 v_color;\nvarying float v_useTex;\nuniform sampler2D texture;\nuniform sampler2D texture_depth;\nvarying vec2 cliped;\n\nuniform vec4 dimensions;\nuniform vec2 mapDimensions;\nuniform float scale;\nuniform vec3 offset;\nuniform float focus;\nuniform float enlarge;\nfloat aspect = dimensions.x / dimensions.y;\n\nvec4 sampleTexture(sampler2D texture, vec2 uv)\n{\n    vec4 color = texture2D(texture, uv);\n    return color;\n}\n\n// mono version of perspective shader\nvec3 perspective(\nsampler2D texture,\nsampler2D texture_depth,\nvec2 uv,\nfloat horizontal_parallax, // 0 - no parallax\nfloat vertical_parallax,   // same\nfloat perspective_factor,  // 0 - no perspective\nfloat h_convergence,       // 0.0 - near, 0.5 - center, 1.0 - far\nfloat v_convergence        // same\n) {\n    const float sensitivity = 15.0; // aligns animation with the previous version where it was multiplied by 15\n    horizontal_parallax *= sensitivity;\n    vertical_parallax *= sensitivity;\n\n    vec3 ray_origin = vec3(uv.x - 0.5, uv.y - 0.5, +1.0);\n    vec3 ray_direction = vec3(uv.x - 0.5, uv.y - 0.5, -1.0);\n\n    ray_direction.xy *= perspective_factor;\n    ray_origin.xy /= 1.0 + perspective_factor;\n    ray_direction.x += horizontal_parallax;\n    ray_direction.y += vertical_parallax;\n\n    ray_origin.x -= h_convergence * horizontal_parallax;\n    ray_origin.y -= v_convergence * vertical_parallax;\n\n    const int step_count = 45; // affects quality and processing time\n    const float hit_threshold = 0.01;\n    ray_direction /= float(step_count);\n\n    for (int i = 0; i < step_count; i++) {\n        ray_origin += ray_direction;\n        vec2 vFlipUV = (ray_origin.xy + 0.5);\n        float scene_z = texture2D(texture_depth, vFlipUV).x;\n        if (ray_origin.z < scene_z) {\n            if (scene_z - ray_origin.z < hit_threshold) {\n                return texture2D(texture, ray_origin.xy + 0.5).rgb;\n            }\n            ray_origin -= ray_direction; // step back\n            ray_direction /= 2.0; // decrease ray step to approach surface with greater precision\n        }\n    }\n    return texture2D(texture, ray_origin.xy + 0.5).rgb;\n}\n\n\nvec3 displacement(\n    sampler2D texture,\n    sampler2D texture_depth,\n    vec2 uv\n) {\n    vec2 scale2 = vec2(scale * min(1.0, 1.0 / aspect), scale * min(1.0, aspect)) * vec2(1, -1) * vec2(1);\n    vec2 mapCords = uv;\n    // mapCords.y *= -1.0;\n    // mapCords.y += 1.0;\n    float map = 1.0 - texture2D(texture_depth, mapCords).r;\n    map = map * -1.0 + focus;\n    vec2 disCords = uv;\n    disCords += offset.xy * map * scale2;\n    return texture2D(texture, disCords).rgb;\n}\n\n\nvoid main()\n{\n    if (cliped.x < 0.)\n\tdiscard;\n    if (cliped.x > 1.)\n\tdiscard;\n    if (cliped.y < 0.)\n\tdiscard;\n    if (cliped.y > 1.)\n\tdiscard;\n    // vec4 color = sampleTexture(texture, v_texcoordAlpha.xy);\n\n\n    float gain = scale * 0.075;\n\tfloat persp_factor = scale * 3.0 * offset.z;\n    vec4 color = vec4(perspective(texture, texture_depth, v_texcoordAlpha.xy, -gain * offset.x, gain * offset.y * aspect, persp_factor, 1.0 - focus, 1.0 - focus), 1.0);\n    color.xyz = linearToGamma(color.xyz);\n\n    // vec4 color = vec4(displacement(texture, texture_depth, v_texcoordAlpha.xy), 1.0);\n\n    // if (v_useTex <= 0.)\n    //     color = vec4(1., 1., 1., 1.);\n    // color.a *= v_color.w;\n    \n    // vec4 transColor = v_color;\n    // transColor = gammaToLinear(v_color);\n    // color.rgb *= transColor.rgb;\n    gl_FragColor = color;\n}\n`;", "export let Depth2dVS = `\n/*\n\ttexture\u548Cfillrect\u4F7F\u7528\u7684\u3002\n*/\nattribute vec4 posuv;\nattribute vec4 attribColor;\nattribute vec4 attribFlags;\nuniform vec4 clipMatDir;\nuniform vec2 clipMatPos;\t\t\nvarying vec2 cliped;\nuniform vec2 size;\nuniform vec2 clipOff;\t\t\t\nvarying vec4 v_texcoordAlpha;\nvarying vec4 v_color;\nvarying float v_useTex;\nvoid main() {\n\tvec4 pos = vec4(posuv.xy,0.,1.);\n\tvec4 pos1  =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,0.,1.0);\n\tgl_Position=pos1;\n\tv_texcoordAlpha.xy = posuv.zw;\n\t\n\tv_color = attribColor/255.0;\n\tv_color.xyz*=v_color.w;\n\tv_useTex = attribFlags.r/255.0;\n\tfloat clipw = length(clipMatDir.xy);\n\tfloat cliph = length(clipMatDir.zw);\n\t\n\tvec2 clpos = clipMatPos.xy;\n\tvec2 clippos = pos.xy - clpos;\t\n\tif(clipw>20000. && cliph>20000.)\n\t\tcliped = vec2(0.5,0.5);\n\telse {\n\t\t\n\t\tcliped=vec2( dot(clippos,clipMatDir.xy)/clipw/clipw, dot(clippos,clipMatDir.zw)/cliph/cliph);\n\t}\n}\n`", "import AniDepthValue2d from \"./AniDepthValue2d\";\r\nimport CustomValue2d from \"./CustomValue2d\";\r\nimport { Depth2dFS } from \"./Depth2dFS\";\r\nimport { Depth2dVS } from \"./Depth2dVS\";\r\n\r\nconst { regClass, property } = Laya;\r\n\r\n@regClass('7bad1742-6eed-4d8d-81c0-501dc5bf03d6', '../src/Main.ts')\r\nexport class Main extends Laya.Script {\r\n\r\n    onStart() {\r\n\t\t// \u521D\u59CB\u53162d\u81EA\u5B9A\u4E49\u6E32\u67D3\r\n\t\t(Laya.Shader2X as any)['customDefines2D'] = [];\r\n\t\t(Laya.Shader2X as any)['value2dMap'] = {};\r\n\r\n\r\n        Laya.loader.load([\"bg/anibg2.jpg\", \"bg/anibgdepth2.jpg\"], Laya.Handler.create(this, this.use2dShader));\r\n    }\r\n\r\n    public use2dShader() {\r\n        let shaderImage: Laya.Image = new Laya.Image();\r\n        let texture = Laya.loader.getRes(\"bg/anibg2.jpg\");\r\n        // \u6DF1\u5EA6\u56FE\r\n        let texture_depth = Laya.loader.getRes(\"bg/anibgdepth2.jpg\");\r\n\r\n        // \u7533\u8BF7id\r\n        let id = CustomValue2d.applyCustomId();\r\n        texture.bitmap[\"_id\"] = id;\r\n        shaderImage.source = texture;\r\n        shaderImage.zOrder = 999;\r\n\r\n        shaderImage.width = Laya.stage.width;\r\n        shaderImage.height = Laya.stage.height;\r\n        \r\n        // \u521B\u5EFA\u6DF1\u5EA6\u52A8\u6548\r\n        let aniDepthValue2d = new AniDepthValue2d(texture.id);\r\n        aniDepthValue2d.texture_host_depth = texture_depth;\r\n        aniDepthValue2d.dimensions = [texture.width, texture.height, texture_depth.width, texture_depth.height];\r\n        aniDepthValue2d.mapDimensions = [texture.width, texture.height];\r\n\r\n        Laya.Value2D._initone(Laya.ShaderDefines2D.TEXTURE2D | id, CustomValue2d);\r\n        let attribLocation = ['posuv', 0, 'attribColor', 1, 'attribFlags', 2];\r\n        let shader = new Laya.Shader2X(Depth2dVS, Depth2dFS, Laya.ShaderDefines2D.TEXTURE2D | Laya.ShaderDefines2D.GAMMASPACE | id, null, attribLocation);\r\n        Laya.stage.addChild(shaderImage);\r\n    }\r\n\r\n}"],
  "mappings": "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",
  "names": []
}
